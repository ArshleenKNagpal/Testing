{"ast":null,"code":"var _jsxFileName = \"/Users/arshleenkaur/Desktop/Test/client/src/pages/SearchGoals.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { saveGoal, searchGoogleGoals } from '../utils/API';\nimport { saveGoalIds, getSavedGoalIds } from '../utils/localStorage';\n\nconst SearchGoals = () => {\n  // create state for holding returned google api data\n  const [searchedGoals, setSearchedGoals] = useState([]); // create state for holding our search field data\n\n  const [searchInput, setSearchInput] = useState(''); // create state to hold saved goalId values\n\n  const [savedGoalIds, setSavedGoalIds] = useState(getSavedGoalIds()); // set up useEffect hook to save `savedGoalIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n\n  useEffect(() => {\n    return () => saveGoalIds(savedGoalIds);\n  }); // create method to search for goals and set state on form submit\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleGoals(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const {\n        items\n      } = await response.json();\n      const goalData = items.map(goal => {\n        var _goal$volumeInfo$imag;\n\n        return {\n          goalId: goal.id,\n          authors: goal.volumeInfo.authors || ['No author to display'],\n          title: goal.volumeInfo.title,\n          description: goal.volumeInfo.description,\n          image: ((_goal$volumeInfo$imag = goal.volumeInfo.imageLinks) === null || _goal$volumeInfo$imag === void 0 ? void 0 : _goal$volumeInfo$imag.thumbnail) || ''\n        };\n      });\n      setSearchedGoals(goalData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  }; // create function to handle saving a goal to our database\n\n\n  const handleSaveGoal = async goalId => {\n    // find the goal in `searchedGoals` state by the matching id\n    const goalToSave = searchedGoals.find(goal => goal.goalId === goalId); // get token\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveGoal(goalToSave, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      } // if goal successfully saves to user's account, save goal id to state\n\n\n      setSavedGoalIds([...savedGoalIds, goalToSave.goalId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Search for Goals!\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"searchInput\",\n    value: searchInput,\n    onChange: e => setSearchInput(e.target.value),\n    type: \"text\",\n    size: \"lg\",\n    placeholder: \"Search for a goal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"success\",\n    size: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Submit Search\")))))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, searchedGoals.length ? `Viewing ${searchedGoals.length} results:` : 'Search for a goal to begin'), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, searchedGoals.map(goal => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: goal.goalId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, goal.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: goal.image,\n      alt: `The cover for ${goal.title}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 19\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }, goal.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 19\n      }\n    }, \"Authors: \", goal.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 19\n      }\n    }, goal.description), Auth.loggedIn() && /*#__PURE__*/React.createElement(Button, {\n      disabled: savedGoalIds === null || savedGoalIds === void 0 ? void 0 : savedGoalIds.some(savedGoalId => savedGoalId === goal.goalId),\n      className: \"btn-block btn-info\",\n      onClick: () => handleSaveGoal(goal.goalId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, (savedGoalIds === null || savedGoalIds === void 0 ? void 0 : savedGoalIds.some(savedGoalId => savedGoalId === goal.goalId)) ? 'This goal has already been saved!' : 'Save this Goal!')));\n  }))));\n};\n\nexport default SearchGoals;","map":{"version":3,"sources":["/Users/arshleenkaur/Desktop/Test/client/src/pages/SearchGoals.js"],"names":["React","useState","useEffect","Jumbotron","Container","Col","Form","Button","Card","CardColumns","Auth","saveGoal","searchGoogleGoals","saveGoalIds","getSavedGoalIds","SearchGoals","searchedGoals","setSearchedGoals","searchInput","setSearchInput","savedGoalIds","setSavedGoalIds","handleFormSubmit","event","preventDefault","response","ok","Error","items","json","goalData","map","goal","goalId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","err","console","error","handleSaveGoal","goalToSave","find","token","loggedIn","getToken","e","target","value","length","some","savedGoalId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveGoal, searchGoogleGoals } from '../utils/API';\nimport { saveGoalIds, getSavedGoalIds } from '../utils/localStorage';\n\nconst SearchGoals = () => {\n  // create state for holding returned google api data\n  const [searchedGoals, setSearchedGoals] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved goalId values\n  const [savedGoalIds, setSavedGoalIds] = useState(getSavedGoalIds());\n\n  // set up useEffect hook to save `savedGoalIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveGoalIds(savedGoalIds);\n  });\n\n  // create method to search for goals and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleGoals(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const goalData = items.map((goal) => ({\n        goalId: goal.id,\n        authors: goal.volumeInfo.authors || ['No author to display'],\n        title: goal.volumeInfo.title,\n        description: goal.volumeInfo.description,\n        image: goal.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedGoals(goalData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a goal to our database\n  const handleSaveGoal = async (goalId) => {\n    // find the goal in `searchedGoals` state by the matching id\n    const goalToSave = searchedGoals.find((goal) => goal.goalId === goalId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveGoal(goalToSave, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // if goal successfully saves to user's account, save goal id to state\n      setSavedGoalIds([...savedGoalIds, goalToSave.goalId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Goals!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a goal'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedGoals.length\n            ? `Viewing ${searchedGoals.length} results:`\n            : 'Search for a goal to begin'}\n        </h2>\n        <CardColumns>\n          {searchedGoals.map((goal) => {\n            return (\n              <Card key={goal.goalId} border='dark'>\n                {goal.image ? (\n                  <Card.Img src={goal.image} alt={`The cover for ${goal.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{goal.title}</Card.Title>\n                  <p className='small'>Authors: {goal.authors}</p>\n                  <Card.Text>{goal.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedGoalIds?.some((savedGoalId) => savedGoalId === goal.goalId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveGoal(goal.goalId)}>\n                      {savedGoalIds?.some((savedGoalId) => savedGoalId === goal.goalId)\n                        ? 'This goal has already been saved!'\n                        : 'Save this Goal!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchGoals;\n"]},"metadata":{},"sourceType":"module"}